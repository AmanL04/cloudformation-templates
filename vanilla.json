{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template to deploy Ghost.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small"
    },
	
    "BaseAMI" : {
      "Description" : "ID of the current Amazon Linux AMI",
      "Type" : "String",
      "Default" : "ami-b66ed3de"
    }
  },
  
  "Mappings" : {

  },

  "Resources" : {
    "Ec2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
		  "SubnetId" : "subnet-0e1ed857",
          "ImageId" : {"Ref" : "BaseAMI"},
          "InstanceType"   : { "Ref" : "InstanceType" },
          "SecurityGroupIds" : [ {"Ref" : "InstanceSecurityGroup"} ],
          "KeyName"        : "Andy's MBPr Personal",
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -ex","\n",
			
			"# Start software updates","\n",
			"/usr/bin/yum update -y","\n",
			
			"# Install and setup Nginx","\n",
			"/usr/bin/yum install nginx -y","\n",
			"service nginx start","\n",
			"chkconfig nginx on","\n",
			"echo 'server { listen 80; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2368; } }' > /etc/nginx/conf.d/virtual.conf","\n",
			"service nginx restart","\n",
			
			"# Installing Node and NPM","\n",
  		    "curl -sL https://rpm.nodesource.com/setup | bash -","\n",
            "yum install -y nodejs","\n",
            "yum groupinstall -y 'Development Tools'","\n",
			"curl -L https://npmjs.org/install.sh | sh","\n",
			
			"# Download and install Ghost","\n",
            "mkdir -p /var/www/","\n",
            "cd /var/www/","\n",
            "curl -L -O https://ghost.org/zip/ghost-latest.zip","\n",
            "/usr/bin/unzip -d ghost ghost-*","\n",
            "cd ghost","\n",
			
			"# Setup config.js for Ghost","\n",
            "cp /var/www/ghost/config.example.js /var/www/ghost/config.js","\n",
            "sed -i -e 's/mail: {},/mail: {\\\n\t    transport: \\x27SMTP\\x27,\\\n\t    options: {\\\n\t        service: \\x27sendmail\\x27,\\\n\t    }\\\n\t},/' /var/www/ghost/config.js","\n",
			"# One of the processes while compiling sqlite requires the HOME variable to be set","\n",
			"export HOME=/root","\n",
			"/usr/bin/npm install --production","\n",
			"# now that all ghost modules are intalled set owner","\n",
			"useradd ghost","\n",
			"chown -R ghost:ghost /var/www/ghost/","\n",
			
			"# Install pm2","\n",
            "/usr/bin/npm install -g pm2","\n",
            "export NODE_ENV=production","\n",
            "su -c \"cd /var/www/ghost/; /usr/bin/pm2 start index.js --name ghost\" -s /bin/bash ghost","\n",
			"su -c \"/usr/bin/pm2 dump\" -s /bin/bash ghost","\n",
            "/usr/bin/pm2 startup centos -u ghost","\n",			
			
			"# Download Ghost init script from GitHub and setup a cron to run it on first boot","\n",
			"wget -O - https://raw.githubusercontent.com/andyboutte/cloudformation-templates/master/ghost_init.sh >> /home/ec2-user/ghost_init.sh","\n",
			"chmod +x /home/ec2-user/ghost_init.sh","\n",
			"echo \"@reboot root /home/ec2-user/ghost_init.sh >> /var/log/ghost_init.log\" >> /etc/cron.d/ghost_init","\n",
			
			"# Clean up","\n",
			"rm /var/www/*.zip","\n",
			
            "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\",",
                                                           "\"Reason\" : \"The application myapp is ready\",",
                                                           "\"UniqueId\" : \"myapp\",",
                                                           "\"Data\" : \"Done\"}' ",
                  "\"", {"Ref" : "WaitForInstanceWaitHandle"},"\"\n" ]]}}
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Access to Ghost application via port 80 and SSH access via port 22",
		"VpcId" : "vpc-307afc55",
        "SecurityGroupIngress" : [ 
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "WaitForInstanceWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },

    "WaitForInstance" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "Ec2Instance",
      "Properties" : {
        "Handle" : {"Ref" : "WaitForInstanceWaitHandle"},
        "Timeout" : "3600"
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Description" : "The URL for the newly created Ghost application",
      "Value" : { "Fn::Join" : ["", [ "http://", { "Fn::GetAtt" : [ "Ec2Instance", "PublicDnsName" ] }, "/ghost" ]]}
    }
  }
}
